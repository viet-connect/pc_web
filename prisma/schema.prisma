generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Article {
  id         String   @id @default(uuid())
  author     String?
  contents   String   @db.Text
  category   String
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  password   String
  title      String
  view_count Int      @default(0) @map("view_count")
}

model Posting {
  id               String   @id @default(uuid())
  address          String
  mainAddress      String   @default("") @map("main_address")
  subAddress       String   @default("") @map("sub_address")
  contactName      String   @map("contact_name")
  contactNumber    String   @map("contact_number")
  contents         String?  @db.Text
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  endingTime       String   @map("ending_time")
  gender           Int
  isDayNegotiable  Boolean  @default(false) @map("is_day_negotiable")
  isTimeNegotiable Boolean  @default(false) @map("is_time_negotiable")
  password         String
  proficiency      Int
  startingTime     String   @map("starting_time")
  title            String
  wageAmount       String   @map("wage_amount")
  wageType         String   @map("wage_type")
  workingDay       Json     @map("working_day")
  viewCount        Int      @default(0) @map("view_count")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  password      String
  email         String?   @unique
  emailVerified DateTime? @map(name: "email_verified")
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  Account       Account[]
  Session       Session[]

  @@map(name: "users")
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")
  user               User      @relation(fields: [userId], references: [id])

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @updatedAt @map(name: "updated_at")
  user         User     @relation(fields: [userId], references: [id])

  @@map(name: "sessions")
}
