generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Article {
  id         String   @id @default(uuid())
  author     String?
  contents   String   @db.Text
  category   String
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  password   String
  title      String
  view_count Int      @default(0) @map("view_count")
}

model Posting {
  id                       String   @id @default(uuid())
  address                  String
  mainAddress              String   @default("") @map("main_address")
  subAddress               String   @default("") @map("sub_address")
  contactName              String   @map("contact_name")
  contactNumber            String   @map("contact_number")
  contents                 String?  @db.Text
  createdAt                DateTime @default(now()) @map("created_at")
  updatedAt                DateTime @updatedAt @map("updated_at")
  endingTime               String   @map("ending_time")
  gender                   Int
  isDayNegotiable          Boolean  @default(false) @map("is_day_negotiable")
  isTimeNegotiable         Boolean  @default(false) @map("is_time_negotiable")
  password                 String
  proficiency              Int
  startingTime             String   @map("starting_time")
  title                    String
  wageAmount               String   @map("wage_amount")
  wageType                 String   @map("wage_type")
  workingDay               Json     @map("working_day")
  viewCount                Int      @default(0) @map("view_count")
  User_UserAppliedPostings User[]   @relation("UserAppliedPostings")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @map("user_id")
  type                     String?
  provider                 String
  providerAccountId        String  @map("provider_account_id")
  token_type               String?
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  scope                    String?
  refresh_token_expires_in Int?
  id_token                 String? @db.Text
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String?
  sessionToken String   @unique
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                          String    @id @default(uuid())
  createdAt                   DateTime  @default(now())
  name                        String
  email                       String?   @unique
  emailVerified               DateTime? @map("email_verified")
  image                       String?
  accounts                    Account[]
  sessions                    Session[]
  Posting_UserAppliedPostings Posting[] @relation("UserAppliedPostings")
}

model VerificationRequest {
  id         String   @id @default(uuid())
  identifier String
  token      String
  expires    DateTime
}
