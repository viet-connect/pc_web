generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Article {
  id         String   @id @default(uuid())
  author     String?
  contents   String   @db.Text
  category   String
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  password   String
  title      String
  view_count Int      @default(0) @map("view_count")
}

model Posting {
  id               String   @id @default(uuid())
  address          String
  mainAddress      String   @default("") @map("main_address")
  subAddress       String   @default("") @map("sub_address")
  contactName      String   @map("contact_name")
  contactNumber    String   @map("contact_number")
  contents         String?  @db.Text
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  endingTime       String   @map("ending_time")
  gender           Int
  isDayNegotiable  Boolean  @default(false) @map("is_day_negotiable")
  isTimeNegotiable Boolean  @default(false) @map("is_time_negotiable")
  password         String
  proficiency      Int
  startingTime     String   @map("starting_time")
  title            String
  wageAmount       String   @map("wage_amount")
  wageType         String   @map("wage_type")
  workingDay       Json     @map("working_day")
  viewCount        Int      @default(0) @map("view_count")
}

model Account {
  id                       String   @id @default(cuid())
  userId                   String   @map("user_id")
  type                     String?
  provider                 String
  providerAccountId        String   @map("provider_account_id")
  token_type               String?
  refresh_token            String?  @db.Text
  access_token             String?  @db.Text
  expires_at               Int?
  scope                    String?
  refresh_token_expires_in Int?
  id_token                 String?  @db.Text
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @unique
  sessionToken String   @unique
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
